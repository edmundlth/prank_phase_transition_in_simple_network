# -*- coding: utf-8 -*-
"""MattFGBoundAlgorithim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w-Rs1i4rNXFd1lwAGKzp8_UVDQ2VgDzj
"""

import numpy as np

h = 5 # Number of hidden neurons
epsilon = 1 # epsilon for approximate rank

w = {
  'a': [1.1, 0.9, 0.2, 1.3, 1],
  'b': [1.1, 1.2, 0.6, 1.3, 1],
  'c': [0, 0, 0, 0, 0],
  'd': 0,
}

def approx_partition(epsilon, u):
  J = 0
  Pi = [] # list not sets
  v = []
  h = len(u)
  for i in range(h):
    grouped = False
    for j in range(J):
      if max([abs(u[i][k] - v[j][k]) for k in range(2)]) <= epsilon:
        Pi[j].append(i)
        grouped = True
        break
    if not grouped:
      J = J+1
      v.append(u[i])
      Pi.append([i])
  return Pi

def bound(epsilon, w_parameter):
  I = [i for i in range(h) if np.abs(w_parameter['b'][i]) > epsilon]
  Pi = approx_partition(epsilon, [[np.sign(w_parameter['b'][i])*w_parameter['b'][i], np.sign(w_parameter['b'][i])*w_parameter['c'][i]]  for i in I])
  alpha = [sum(np.sign(w_parameter['b'][i])*w_parameter['a'][i] for i in Pi_j) for Pi_j in Pi]
  return len([j for j in range(len(Pi)) if abs(alpha[j]) > epsilon * len(Pi[j])])

upper_bound = bound(epsilon, w)
print(upper_bound)